version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-agent-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_agent_db
      POSTGRES_USER: aiagent
      POSTGRES_PASSWORD: securePassword123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aiagent -d ai_agent_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-agent-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis
    restart: unless-stopped
    command: redis-server --requirepass redisPassword --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redisPassword", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-agent-network

  # AI Agent API Gateway
  ai-agent-api:
    build:
      context: ../..
      dockerfile: Dockerfile
      target: development
    container_name: ai-agent-api
    restart: unless-stopped
    environment:
      # Application
      ENVIRONMENT: development
      API_HOST: 0.0.0.0
      API_PORT: 8000
      LOG_LEVEL: DEBUG
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ai_agent_db
      DATABASE_USER: aiagent
      DATABASE_PASSWORD: securePassword123
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redisPassword
      REDIS_DB: 0
      
      # JWT
      JWT_SECRET_KEY: development-secret-key-change-in-production
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 1440
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: true
      DEFAULT_RATE_LIMIT_PER_MINUTE: 1000
      DEFAULT_RATE_LIMIT_PER_HOUR: 10000
      
      # Development
      RELOAD: true
      DEBUG: true
    ports:
      - "8000:8000"
    volumes:
      - ../../src:/home/appuser/app/src:ro
      - ../../examples:/home/appuser/app/examples:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-agent-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-agent-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - ai-agent-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-agent-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ai-agent-network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: ai-agent-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-agent-api
    networks:
      - ai-agent-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
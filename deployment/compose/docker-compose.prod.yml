version: '3.8'

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: ai-agent-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ai_agent_db}
      POSTGRES_USER: ${DATABASE_USER:-aiagent}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-aiagent} -d ${DATABASE_NAME:-ai_agent_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-agent-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-agent-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # AI Agent API Gateway - Production
  ai-agent-api:
    build:
      context: ../..
      dockerfile: Dockerfile
      target: production
    container_name: ai-agent-api-prod
    restart: always
    environment:
      # Application
      ENVIRONMENT: production
      API_HOST: 0.0.0.0
      API_PORT: 8000
      LOG_LEVEL: INFO
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-ai_agent_db}
      DATABASE_USER: ${DATABASE_USER:-aiagent}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
      
      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 1440
      
      # Security
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: true
      DEFAULT_RATE_LIMIT_PER_MINUTE: 100
      DEFAULT_RATE_LIMIT_PER_HOUR: 1000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-agent-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ai-agent-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ai-agent-api
    networks:
      - ai-agent-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-agent-prometheus-prod
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - ai-agent-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-agent-grafana-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://monitoring.local-ai-agent.com
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ai-agent-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: ai-agent-db-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    depends_on:
      - postgres
    networks:
      - ai-agent-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  ai-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
name: Continuous Integration

on:
  push:
    branches: [ main, develop, dev-phase-* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Linting and Code Quality
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pytest
        pip install -r requirements.txt

    - name: Run Black formatting check
      run: black --check --diff src/ examples/

    - name: Run Flake8 linting
      run: flake8 src/ examples/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run MyPy type checking
      run: mypy src/ --ignore-missing-imports

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key-for-ci
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (development)
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        tags: local-ai-agent:dev-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Docker image (production)
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        tags: local-ai-agent:prod-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        docker run --rm -d --name test-container \
          -e JWT_SECRET_KEY=test-key \
          -e DATABASE_HOST=localhost \
          -e REDIS_HOST=localhost \
          -p 8000:8000 \
          local-ai-agent:prod-${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Stop container
        docker stop test-container

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        cp deployment/compose/.env.example deployment/compose/.env
        sed -i 's/your_secure_database_password_here/test_password/g' deployment/compose/.env
        sed -i 's/your_secure_redis_password_here/test_redis_pass/g' deployment/compose/.env
        sed -i 's/your_super_secret_jwt_key_change_this_in_production_minimum_32_characters/test_jwt_secret_key_for_integration_tests_minimum_32_chars/g' deployment/compose/.env

    - name: Run integration tests
      run: |
        cd deployment/compose
        docker-compose up -d --build
        
        # Wait for services to be ready
        sleep 60
        
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/
        
        # Test authentication
        RESPONSE=$(curl -s -X POST http://localhost:8000/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username": "admin", "password": "admin123"}')
        
        TOKEN=$(echo $RESPONSE | jq -r '.access_token')
        
        # Test authenticated endpoint
        curl -f -H "Authorization: Bearer $TOKEN" http://localhost:8000/api/v1/agents
        
        # Cleanup
        docker-compose down -v

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test, docker-build]
    if: always()
    steps:
    - name: Notify success
      if: needs.security-scan.result == 'success' && needs.lint.result == 'success' && needs.test.result == 'success' && needs.docker-build.result == 'success'
      run: echo "✅ All CI checks passed!"

    - name: Notify failure
      if: needs.security-scan.result == 'failure' || needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "❌ CI checks failed!"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Docker build: ${{ needs.docker-build.result }}"
        exit 1